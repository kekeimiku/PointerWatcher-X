#![allow(non_upper_case_globals, non_camel_case_types, unused)]

// automatically generated by rust-bindgen 0.70.1

#[repr(C)]
#[derive(Copy, Clone)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}

impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }

    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}

pub const PERF_FLAG_FD_CLOEXEC: u32 = 8;
pub const __NR_perf_event_open: u32 = 298;

pub const PERF_TYPE_BREAKPOINT: ::core::ffi::c_uint = 5;
pub const PERF_SAMPLE_TID: ::core::ffi::c_ulong = 2;
pub const PERF_SAMPLE_REGS_USER: ::core::ffi::c_ulong = 4096;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct perf_event_attr {
    pub type_: ::core::ffi::c_uint,
    pub size: ::core::ffi::c_uint,
    pub config: ::core::ffi::c_ulonglong,
    pub __bindgen_anon_1: perf_event_attr__bindgen_ty_1,
    pub sample_type: ::core::ffi::c_ulonglong,
    pub read_format: ::core::ffi::c_ulonglong,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub __bindgen_anon_2: perf_event_attr__bindgen_ty_2,
    pub bp_type: ::core::ffi::c_uint,
    pub __bindgen_anon_3: perf_event_attr__bindgen_ty_3,
    pub __bindgen_anon_4: perf_event_attr__bindgen_ty_4,
    pub branch_sample_type: ::core::ffi::c_ulonglong,
    pub sample_regs_user: ::core::ffi::c_ulonglong,
    pub sample_stack_user: ::core::ffi::c_uint,
    pub clockid: ::core::ffi::c_int,
    pub sample_regs_intr: ::core::ffi::c_ulonglong,
    pub aux_watermark: ::core::ffi::c_uint,
    pub sample_max_stack: ::core::ffi::c_ushort,
    pub __reserved_2: ::core::ffi::c_ushort,
    pub aux_sample_size: ::core::ffi::c_uint,
    pub __reserved_3: ::core::ffi::c_uint,
    pub sig_data: ::core::ffi::c_ulonglong,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union perf_event_attr__bindgen_ty_1 {
    pub sample_period: ::core::ffi::c_ulonglong,
    pub sample_freq: ::core::ffi::c_ulonglong,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union perf_event_attr__bindgen_ty_2 {
    pub wakeup_events: ::core::ffi::c_uint,
    pub wakeup_watermark: ::core::ffi::c_uint,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union perf_event_attr__bindgen_ty_3 {
    pub bp_addr: ::core::ffi::c_ulonglong,
    pub kprobe_func: ::core::ffi::c_ulonglong,
    pub uprobe_path: ::core::ffi::c_ulonglong,
    pub config1: ::core::ffi::c_ulonglong,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union perf_event_attr__bindgen_ty_4 {
    pub bp_len: ::core::ffi::c_ulonglong,
    pub kprobe_addr: ::core::ffi::c_ulonglong,
    pub probe_offset: ::core::ffi::c_ulonglong,
    pub config2: ::core::ffi::c_ulonglong,
}

impl perf_event_attr {
    #[inline]
    pub fn new() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }

    #[inline]
    pub fn set_precise_ip(&mut self, val: ::core::ffi::c_ulonglong) {
        self._bitfield_1.set(15usize, 2u8, val)
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct perf_event_mmap_page {
    pub version: ::core::ffi::c_uint,
    pub compat_version: ::core::ffi::c_uint,
    pub lock: ::core::ffi::c_uint,
    pub index: ::core::ffi::c_uint,
    pub offset: ::core::ffi::c_longlong,
    pub time_enabled: ::core::ffi::c_ulonglong,
    pub time_running: ::core::ffi::c_ulonglong,
    pub __bindgen_anon_1: perf_event_mmap_page__bindgen_ty_1,
    pub pmc_width: ::core::ffi::c_ushort,
    pub time_shift: ::core::ffi::c_ushort,
    pub time_mult: ::core::ffi::c_uint,
    pub time_offset: ::core::ffi::c_ulonglong,
    pub time_zero: ::core::ffi::c_ulonglong,
    pub size: ::core::ffi::c_uint,
    pub __reserved_1: ::core::ffi::c_uint,
    pub time_cycles: ::core::ffi::c_ulonglong,
    pub time_mask: ::core::ffi::c_ulonglong,
    pub __reserved: [::core::ffi::c_uchar; 928usize],
    pub data_head: ::core::ffi::c_ulonglong,
    pub data_tail: ::core::ffi::c_ulonglong,
    pub data_offset: ::core::ffi::c_ulonglong,
    pub data_size: ::core::ffi::c_ulonglong,
    pub aux_head: ::core::ffi::c_ulonglong,
    pub aux_tail: ::core::ffi::c_ulonglong,
    pub aux_offset: ::core::ffi::c_ulonglong,
    pub aux_size: ::core::ffi::c_ulonglong,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union perf_event_mmap_page__bindgen_ty_1 {
    pub capabilities: ::core::ffi::c_ulonglong,
    pub __bindgen_anon_1: perf_event_mmap_page__bindgen_ty_1__bindgen_ty_1,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct perf_event_mmap_page__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u64; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct perf_event_header {
    pub type_: ::core::ffi::c_uint,
    pub misc: ::core::ffi::c_ushort,
    pub size: ::core::ffi::c_ushort,
}

pub const PERF_RECORD_SAMPLE: ::core::ffi::c_uint = 9;

pub const HW_BREAKPOINT_LEN_1: ::core::ffi::c_uint = 1;
pub const HW_BREAKPOINT_LEN_2: ::core::ffi::c_uint = 2;
pub const HW_BREAKPOINT_LEN_4: ::core::ffi::c_uint = 4;
pub const HW_BREAKPOINT_LEN_8: ::core::ffi::c_uint = 8;
pub const HW_BREAKPOINT_W: ::core::ffi::c_uint = 2;
pub const HW_BREAKPOINT_RW: ::core::ffi::c_uint = 3;
pub const HW_BREAKPOINT_X: ::core::ffi::c_uint = 4;

use core::ffi::{c_int, c_long, c_ulong};

pub unsafe fn perf_event_open(
    attrs: *mut perf_event_attr,
    pid: i32,
    cpu: c_int,
    group_fd: c_int,
    flags: c_ulong,
) -> c_int {
    libc::syscall(
        __NR_perf_event_open as c_long,
        attrs as *const perf_event_attr,
        pid,
        cpu,
        group_fd,
        flags,
    ) as c_int
}
